<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sasheldon.com]]></title>
  <link href="http://sasheldon.com/blog/atom.xml" rel="self"/>
  <link href="http://sasheldon.com/"/>
  <updated>2014-03-21T02:52:30-07:00</updated>
  <id>http://sasheldon.com/</id>
  <author>
    <name><![CDATA[Steven Sheldon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simplifying JSON Response Mocks With Jinja]]></title>
    <link href="http://sasheldon.com/blog/2013/12/14/simplifying-json-response-mocks-with-jinja/"/>
    <updated>2013-12-14T21:43:01Z</updated>
    <id>http://sasheldon.com/blog/2013/12/14/simplifying-json-response-mocks-with-jinja</id>
    <content type="html"><![CDATA[<p>For documenting and testing large APIs, response mocks can be a very useful
tool. They not only provide examples for the users of your API, but they can be
used in automated tests as if you had received real data without actually
hitting the network.</p>

<p>Creating and maintaining a large collection of response mocks can be greatly
simplified by preprocessing them with a template engine like Python&rsquo;s
<a href="http://jinja.pocoo.org/">Jinja</a>. Although this adds another step to your build
process, it allows some really useful functionality!</p>

<!-- more -->

<h3>Variables</h3>

<p>One of the first advantages of processing response mocks with Jinja is that
we can use <a href="http://jinja.pocoo.org/docs/templates/#variables">variables</a> when
generating them.
For example, let&rsquo;s consider an API that can respond with information about a
person. One of our mock responses is a Person object, like so:</p>
<div class="highlight"><pre><code class="js language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
    <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>
    <span class="s2">&quot;phone_number&quot;</span><span class="o">:</span> <span class="s2">&quot;415 555-1234&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>However, developers in different locations require that the phone number have a
local area code. In this situation, we could simply change the mock to be:</p>
<div class="highlight"><pre><code class="js+jinja language-js+jinja" data-lang="js+jinja"><span class="p">{</span>
    <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
    <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>
    <span class="s2">&quot;phone_number&quot;</span><span class="o">:</span> <span class="s2">&quot;</span><span class="cp">{{</span> <span class="nv">area_code</span> <span class="cp">}}</span><span class="s2"> 555-1234&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>Now, we only need to process the mocks through Jinja with the area code in
the context to generate mocks using the new area code. We can render the mock
with <code>area_code=&#39;312&#39;</code> in the context to get the phone number <code>&quot;312 555-1234&quot;</code>.</p>

<h3>Conditionals</h3>

<p>We can further take advantage of Jinja to template our mocks using more
complicated control flows. For example, suppose that we wanted to format our
mock from the previous example to include a Person&rsquo;s last name sometimes, but
not in other cases. We can accomplish this simply in Jinja with an
<a href="http://jinja.pocoo.org/docs/templates/#if">if block</a>:</p>
<div class="highlight"><pre><code class="js+jinja language-js+jinja" data-lang="js+jinja"><span class="p">{</span>
    <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
    <span class="cp">{%</span> <span class="k">if</span> <span class="nv">last_names_included</span> <span class="cp">%}</span>
    <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>
    <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
    <span class="s2">&quot;phone_number&quot;</span><span class="o">:</span> <span class="s2">&quot;415 555-1234&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>If this mock is rendered with <code>last_names_included=True</code> in the context,
it will include the <code>last_name</code> field, and if not it will be absent!</p>

<h3>Including mocks</h3>

<p>The previous examples might feel a little contrived, but importing one mock
from another is one of the greatest benefits of Jinja.
A large API will likely have objects with a common scheme that are used in
multiple responses, and it can be very convenient and greatly simplify our
mocks if we can define an object once and reference it in many places.</p>

<p>Perhaps multiple responses from our example API include addresses in a common
format. We can provide an example address in its own file:</p>
<div class="highlight"><pre><code class="js language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;street_address&quot;</span><span class="o">:</span> <span class="s2">&quot;21 2nd Street&quot;</span><span class="p">,</span>
    <span class="s2">&quot;city&quot;</span><span class="o">:</span> <span class="s2">&quot;New York&quot;</span><span class="p">,</span>
    <span class="s2">&quot;state&quot;</span><span class="o">:</span> <span class="s2">&quot;NY&quot;</span><span class="p">,</span>
    <span class="s2">&quot;postal_code&quot;</span><span class="o">:</span> <span class="mi">10021</span>
<span class="p">}</span>
</code></pre></div>
<p>Then, in any response that includes an address, instead of copy-pasting this
example address or creating an entirely new address, we can simply include our
address in the mock with
<a href="http://jinja.pocoo.org/docs/templates/#include">Jinja&rsquo;s include tag</a>:</p>
<div class="highlight"><pre><code class="js+jinja language-js+jinja" data-lang="js+jinja"><span class="p">{</span>
    <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
    <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>
    <span class="s2">&quot;address&quot;</span><span class="o">:</span> <span class="cp">{%</span> <span class="k">include</span> <span class="s1">&#39;address.json&#39;</span> <span class="cp">%}</span><span class="p">,</span>
    <span class="s2">&quot;phone_number&quot;</span><span class="o">:</span> <span class="s2">&quot;415 555-1234&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>The include tag does not only let us avoid duplicating data; if each object is
stored in its own file, it can turn our response mocks into a simple
composition of objects where the structure is clear at a glance.</p>

<h3>Extending mocks</h3>

<p>I commonly need to create a response mock that is modified slightly from an
existing one, like a version of the response that has a parameter with a
different value or that specifies some optional parameters.
I think of this like JSON &ldquo;inheritance&rdquo;, where an object gets all the values
from a base object but can then override them.</p>

<p>With Jinja, we call allow this &ldquo;inheritance&rdquo; by creating a way to extend mocks.
We can simply model the changes we want and the base object as Python
<a href="http://docs.python.org/2/library/stdtypes.html#mapping-types-dict"><code>dict</code></a>s and
use the <a href="http://docs.python.org/2/library/stdtypes.html#dict.update"><code>update</code></a>
method to override the items in the base dictionary with our changes.
The dictionary of updates will be specified in JSON, so a function to return
the JSON that results from updating looks like this:</p>
<div class="highlight"><pre><code class="python language-python" data-lang="python"><span class="k">def</span> <span class="nf">json_update</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">updates</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">result</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">updates</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div>
<p>We can then include this function in Jinja&rsquo;s context to access it within our
response mocks. This allows us to write an <code>extend_json</code>
<a href="http://jinja.pocoo.org/docs/templates/#macros">macro</a>:</p>
<div class="highlight"><pre><code class="jinja language-jinja" data-lang="jinja"><span class="cp">{%</span> <span class="k">macro</span> <span class="nv">include_json</span><span class="o">(</span><span class="nv">path</span><span class="o">)</span> <span class="cp">%}{%</span> <span class="k">include</span> <span class="nv">path</span> <span class="cp">%}{%</span> <span class="k">endmacro</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">macro</span> <span class="nv">extend_json</span><span class="o">(</span><span class="nv">base_path</span><span class="o">)</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{{</span> <span class="nv">json_update</span><span class="o">(</span><span class="nv">include_json</span><span class="o">(</span><span class="nv">base_path</span><span class="o">),</span> <span class="nv">caller</span><span class="o">())</span> <span class="cp">}}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endmacro</span> <span class="cp">%}</span><span class="x"></span>
</code></pre></div>
<p>This macro will be called with the JSON updates as its body so that they are
accessible within the macro through the <code>caller()</code> function.
The <code>include_json</code> macro just allows us to use an included file as an argument
to the <code>json_update</code> function.</p>

<p>To see this macro in action, let&rsquo;s consider our Person object with an age
parameter:</p>
<div class="highlight"><pre><code class="js language-js" data-lang="js"><span class="p">{</span>
    <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
    <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Smith&quot;</span><span class="p">,</span>
    <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
    <span class="s2">&quot;phone_number&quot;</span><span class="o">:</span> <span class="s2">&quot;415 555-1234&quot;</span>
<span class="p">}</span>
</code></pre></div>
<p>To create another Person object with a different age, we only have to do this:</p>
<div class="highlight"><pre><code class="js+jinja language-js+jinja" data-lang="js+jinja"><span class="cp">{%</span> <span class="k">call</span> <span class="nv">extend_json</span><span class="o">(</span><span class="s1">&#39;person.json&#39;</span><span class="o">)</span> <span class="cp">%}</span>
<span class="p">{</span>
    <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">70</span>
<span class="p">}</span>
<span class="cp">{%</span> <span class="k">endcall</span> <span class="cp">%}</span>
</code></pre></div>
<p>It&rsquo;s useful to note that the <code>extend_json</code> macro must be available in this
file, so we&rsquo;ll likely need to
<a href="http://jinja.pocoo.org/docs/templates/#import">import</a> it from the file in
which it is declared.</p>

<p>The functionality of Jinja doesn&rsquo;t end with macros; after all, it&rsquo;s a
full-fledged template engine with many
<a href="http://jinja.pocoo.org/docs/templates/#list-of-builtin-filters">built-in filters</a>
and a powerful (if complicated)
<a href="http://jinja.pocoo.org/docs/extensions/">extension system</a>.
This article just covered the functionality that I&rsquo;ve found useful, but Jinja
can surely adapt to meet whatever your needs are.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting for Octopress 2.0's Successor]]></title>
    <link href="http://sasheldon.com/blog/2013/07/07/waiting-for-octopress-2-successor/"/>
    <updated>2013-07-07T02:24:00-07:00</updated>
    <id>http://sasheldon.com/blog/2013/07/07/waiting-for-octopress-2-successor</id>
    <content type="html"><![CDATA[<p>The next version of <a href="http://octopress.org/">Octopress</a> is packed full of
<a href="https://gist.github.com/imathis/e9c2ee2406e93c4269e8">awesome improvements</a>.
Octopress will change massively to be more extensible and customizable while
still being as powerful and easy as ever; as such, this update has been in
development for a long time, still not having released officially.</p>

<p>In anticipation of this update, I periodically check the
<a href="https://twitter.com/octopress">Octopress Twitter</a> for news and have
encountered many release date estimates. Estimating time for development is
<a href="http://blog.hut8labs.com/coding-fast-and-slow.html">notoriously difficult</a>,
so I&rsquo;ve compiled a lighthearted Twitter history of Octopress 2.0&rsquo;s
successor and its estimated release dates.</p>

<!-- more -->

<p>The follow-up to Octopress 2.0 was originally envisioned as a much smaller set
of changes to be called Octopress 2.1. The release of this version was first
mentioned in March of 2012 as &ldquo;soon&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet" data-conversation="none"><p><a href="https://twitter.com/apcarballo">@apcarballo</a> Glad to help. That will be shipping in 2.1 (soon).</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/184723922556686337">March 27, 2012</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>By May, the outlook for Octopress 2.1 was looking good enough that its release
seemed imminent, within a &ldquo;day or two&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet" data-conversation="none"><p><a href="https://twitter.com/jameslutley">@jameslutley</a> Beautiful work. Have you tried 2.1 yet? I&rsquo;m hoping to release it in the next day or two.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/205288498591309824">May 23, 2012</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>But it was not to be! A week and a half later, in June, 2.1 was still looking
as though it would release &ldquo;soon&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet" data-conversation="none"><p><a href="https://twitter.com/ScottMuc">@ScottMuc</a> 2.1 should be releasing soon. It has lots of goodies and fixes.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/209408163571707905">June 3, 2012</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>Next month, July, enough progress had been made to offer a new estimate that
2.1 would release in a &ldquo;week or two&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/fannheyward">@fannheyward</a> It&rsquo;ll be released once I finish a couple of remaining features. I&rsquo;m hoping that&rsquo;ll be in the next week or two.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/219804276447379456">July 2, 2012</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>It was not until 4 months later in November that the next estimation was made
that 2.1 would be released before the end of 2012.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/sebdah">@sebdah</a> I can’t give a solid date right now. But I expect to have a release before years end.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/268762061197148161">November 14, 2012</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>With an acknowledgement of the difficulty in estimating, by January 2013
Octopress 2.1 was predicted to be completed &ldquo;soon&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/vassie">@vassie</a> We&rsquo;re working on an asset pipeline, fixing any critical bugs and setting up a migration for 2.0. It&rsquo;s hard to estimate, but soon.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/289446177575948289">January 10, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>In February, it seemed that the eagerly awaited update would be finalized
within a &ldquo;month or two&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/inti_minty">@inti_minty</a> right now it’s not entirely stable. We’re working on a few large features then we’ll release it in the next month or two.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/300027017397665793">February 8, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>With the tremendous amount of effort that had gone into the update, it seemed
more fitting that the major version change, so it would instead be released as
<a href="https://twitter.com/octopress/status/306972342582657026">Octopress 3.0</a>.</p>

<p>By March, this 3.0 update&rsquo;s release date was further clarified to &ldquo;mid April&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/adadslife">@adadslife</a> Right now, 2.1 is under pretty active development. We’re shooting for a mid April release, so it might be a good idea to wait.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/314553072535887872">March 21, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>My mid April, though, it seemed more likely that the release would occur
later in the month.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/kaushikgopal">@kaushikgopal</a> I’d hold off for the next release. It’s in flux right now. We’re hoping for late April.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/323868125709864960">April 15, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>Although an April release had been missed, by late May it seemed that there
would be a 3.0 release candidate available within a &ldquo;month or so&rdquo;.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p>@salout_de We’re currently working through getting some core functionality working, but I’ll be announcing an RC in the next month or so.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/339044122801360896">May 27, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>At the end of June, the ambitious Octopress 3.0 was still predicted to arrive
during the summer.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/atlgeek007">@atlgeek007</a> Going well. We’re targeting a summer release, still lots to do though. :)</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/351439257996505088">June 30, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>And so we still anticipate the official release of this update that will
redefine Octopress. This does showcase a neat benefit of open source;
despite not being officilly released, you can try out 3.0 and closely follow
its development <a href="https://github.com/imathis/octopress/tree/2.1">on GitHub</a>.</p>

<p>Regardless of Octopress&#39; history of imprecise estimates, I have great faith in
its developers to deliver such an ambitious update. I&rsquo;ll keep an eye out on
Twitter for an announcement that Octopress 3.0 has finally been perfected!</p>

<hr>

<p><strong>Update (Aug 18, 2013):</strong>
By the end of July, there was still &ldquo;a ways to go&rdquo; on Octopress 3.0, but
version 2.1 of Octopress was resurrected as a smaller, incremental upgrade on
the way to Octopress 3.0.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/atlgeek007">@atlgeek007</a> we still have a ways to go. Right now I’m working on 2.1 which adds support for Jekyll 1.0 and uses Guard for watching files.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/361299670313615360">July 28, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<hr>

<p><strong>Update (Feb 15, 2014):</strong>
In September, Octopress 3.0 still wasn&rsquo;t ready for release, but it seemed
mature enough that a blog post was promised detailing the roadmap leading up
to its release.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/brian_pearce">@brian_pearce</a> We’ve finally nailed it down. Blog post coming soon after <a href="https://twitter.com/imathis">@imathis</a> gets back from BlendConf.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/375377966727192576">September 4, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>Despite it originally being anticipated that this blog post would be published
<a href="https://twitter.com/octopress/statuses/381781655385812992">within a week</a>,
by mid October there were still details to be ironed out.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/breerly">@breerly</a> There’s a draft. Still ironing out some details. :)</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/392425128442994688">October 21, 2013</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>By the new year, it appeared that version 3.0 was still &ldquo;a couple of months&rdquo;
away from being released.</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/kartikluke">@kartikluke</a> The update is coming with Octopress 3.0 (which is probably a couple of months out) you should be able to migrate content easily.</p>&mdash; Octopress (@octopress) <a href="https://twitter.com/octopress/statuses/420592959672029184">January 7, 2014</a></blockquote>
<script async src="http://sasheldon.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>It also appears that the previously proposed version 2.1 was abandoned,
so no new version is slated before Octopress 3.0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://sasheldon.com/blog/2012/11/15/octopress/"/>
    <updated>2012-11-15T22:14:00-08:00</updated>
    <id>http://sasheldon.com/blog/2012/11/15/octopress</id>
    <content type="html"><![CDATA[<p>I really like git; if I could keep everything under version control, I would.
I&rsquo;ve started writing all my papers in LaTeX instead of Word, not only because
it&rsquo;s cleaner and can provide more control, but because then I can version
control them. Hell, I&rsquo;ve even started keeping my Borderlands 2 game saves
backed up in a git repository.</p>

<p>Imagine my delight, then, when I discovered <a href="http://octopress.org/">Octopress</a>.
Octopress is a framework that makes it really easy to generate a blog just from
a set of markdown files that can be hosted on
<a href="http://pages.github.com/">GitHub pages</a>. I&rsquo;ve already been using GitHub to
host my personal website, and using it to host a blog would be pretty swell.</p>

<p>I&rsquo;ve worked through the documentation to get a blog up and running; after all,
I have homework to be working on right now, so I need to find something else to
do. Nevermind the fact that I never actually put in the effort to blog or can
come up with interesting topics; if nothing else, this was just an exercise to
test out Octopress and to become more familiar with the features of GitHub
pages.</p>
]]></content>
  </entry>
  
</feed>
